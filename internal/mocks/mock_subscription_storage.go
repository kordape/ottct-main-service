// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kordape/ottct-main-service/internal/handler (interfaces: SubscriptionStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	handler "github.com/kordape/ottct-main-service/internal/handler"
)

// MockSubscriptionStorage is a mock of SubscriptionStorage interface.
type MockSubscriptionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionStorageMockRecorder
}

// MockSubscriptionStorageMockRecorder is the mock recorder for MockSubscriptionStorage.
type MockSubscriptionStorageMockRecorder struct {
	mock *MockSubscriptionStorage
}

// NewMockSubscriptionStorage creates a new mock instance.
func NewMockSubscriptionStorage(ctrl *gomock.Controller) *MockSubscriptionStorage {
	mock := &MockSubscriptionStorage{ctrl: ctrl}
	mock.recorder = &MockSubscriptionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionStorage) EXPECT() *MockSubscriptionStorageMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockSubscriptionStorage) AddSubscription(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockSubscriptionStorageMockRecorder) AddSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockSubscriptionStorage)(nil).AddSubscription), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionStorage) DeleteSubscription(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionStorageMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionStorage)(nil).DeleteSubscription), arg0, arg1)
}

// GetSubscriptionsByEntity mocks base method.
func (m *MockSubscriptionStorage) GetSubscriptionsByEntity(arg0 string) ([]handler.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByEntity", arg0)
	ret0, _ := ret[0].([]handler.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByEntity indicates an expected call of GetSubscriptionsByEntity.
func (mr *MockSubscriptionStorageMockRecorder) GetSubscriptionsByEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByEntity", reflect.TypeOf((*MockSubscriptionStorage)(nil).GetSubscriptionsByEntity), arg0)
}

// GetSubscriptionsByUser mocks base method.
func (m *MockSubscriptionStorage) GetSubscriptionsByUser(arg0 uint) ([]handler.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByUser", arg0)
	ret0, _ := ret[0].([]handler.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUser indicates an expected call of GetSubscriptionsByUser.
func (mr *MockSubscriptionStorageMockRecorder) GetSubscriptionsByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUser", reflect.TypeOf((*MockSubscriptionStorage)(nil).GetSubscriptionsByUser), arg0)
}
